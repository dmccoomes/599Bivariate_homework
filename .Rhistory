# absolute values
table(eduwa$LocaleType,exclude = 'nothing')
# relative values
absoluteT=table(eduwa$LocaleType,exclude = 'nothing')
prop.table(absoluteT)
# the pie plots the table:
ToPlot=prop.table(absoluteT)
names(ToPlot)
names(ToPlot)[5]='Unknown'
# the pie plots the table:
titleText='Where are Public Schools located in WA in 2019?'
sourceText='Source: US Department of Education'
# the pie plots the table:
titleText2='WA still has schools locations unknown \n (info from 2018)'
# the pie plots the table:
titleText3='WA needs to fully categorize school locations\n(info from 2018)'
#DMC - the \n moves the rest of the title to the next line
ToPlot*100
# details:
ToPlot=ToPlot*100 # preparing labels
paletteHereNew=c('gray') # just one color
tableFreq=as.data.frame(ToPlot)
names(tableFreq)=c("locale","pct")
#you have:
tableFreq
library(ggplot2)
#base GGPLOT2 starts with a "base", telling WHAT VARIABLES TO PLOT
base= ggplot(data = tableFreq,
aes(x = locale,
y = pct))
plot1 = base + geom_bar(fill ="gray",
stat = 'identity') # y is just what it is!
#plot1
plot2 = plot1 + labs(title=titleText,
x = NULL,
y = NULL,
caption = sourceText)
plot2
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
plot3
library(scales)
# customize Y axis
plot4 = plot3 + scale_y_continuous(breaks=c(0,10, 25,40,50),
limits = c(0, 50), # expand = c(0, 0),
labels=scales::unit_format(suffix = "%"))
plot4
plot5 = plot4 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plot5
plot6 = plot5 + geom_text(aes(
y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3)
# wanna flip the plot?
#plot6 #+ coord_flip()
tableFreq[order(-tableFreq$pct),]
plot7=plot6 + coord_flip() + aes(x=reorder(locale, pct))
plot7
base = ggplot(tableFreq, aes(x=locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "grey50")
lolliplot1 + geom_point()
tableFreq[order(tableFreq$pct),]
# reordering DF steps:
tableFreqO=tableFreq[order(tableFreq$pct),]
base = ggplot(tableFreqO, aes(locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# new variable
tableFreqO$gap=tableFreqO$pct-25
# plot the new variable
base = ggplot(tableFreqO, aes(locale,gap))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
# add new aesthetics 'color'
base = ggplot(tableFreqO, aes(locale,gap,
color=PositiveGap)) #change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
base = ggplot(tableFreqO, aes(locale,gap,color=PositiveGap,
label = round(gap,3))) #  change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2=lolliplot1 + geom_point()
lolliplot3= lolliplot2 + scale_x_discrete(limits=tableFreqO$locale)
# annotating and moving the text on the horizontal
lolliplot3 + geom_text(nudge_x=0.3)
lolliplot3 + geom_text(nudge_x=0.3,show.legend = FALSE)
titleText = "Where are schools located in WA in 2019?"
lolliplot4 = lolliplot3 + labs(title=titleText,
x = "Location",
y = "Gap (%)",
caption = sourceText)
lolliplot4 + geom_text(nudge_x=0.3,show.legend = FALSE) + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
# boxplots do not use frequency tables
# as.numeric produces turns levels of the factor into numbers
box1 = ggplot(eduwa, aes(y=as.numeric(High.Grade),x=''))
box1 = box1 + geom_boxplot() + coord_flip() # to show it horizontally
box1
# the labels use the original ordinal levels
ordLabels= levels(eduwa$High.Grade)
box2 = box1 + scale_y_continuous(labels=ordLabels,breaks=1:15)
box2
#get positions
# using 'ggplot_build'
pos_q1=     ggplot_build(box2)$data[[1]]$lower
pos_median= ggplot_build(box2)$data[[1]]$middle
pos_q3=     ggplot_build(box2)$data[[1]]$upper
# using
levels(eduwa$High.Grade)[c(pos_q1,pos_median,pos_q3)]
#DMC adding
#install.packages("summarytools")
library(summarytools)
#box2
title="Box plot of maximum grade in WA"
box3 = box2 + labs(title=title,
x="",
y="Grade level")
box4 = box3 + theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
box4
library(ggplot2)
boxplot(meanValues,horizontal = T,ylim=c(5,30))
dataHist=hist(eduwa$Free.Lunch)
hist(eduwa$Free.Lunch, labels=T, xlab="Free Lunch", xaxt="n")
axis(side=1, at=dataHist$breaks) # showing axis labels better
# no need to show count of NAs:
freq(eduwa3$redLunchOrd,style = 'rmarkdown',report.nas = F)
eduwa3$redLunchOrd=cut(eduwa3$Reduced.Lunch,
breaks = dataHist$breaks,
include.lowest = T,
ordered_result = T)
hist(eduwa3$Reduced.Lunch,labels = T,xlab="Reduced Lunch", xaxt="n")
#setting the chunk options
knitr::opts_chunk$set(echo=FALSE)
link='https://github.com/EvansDataScience/VisualAnalytics_2_tabularData/raw/master/data/eduwa.rda'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
# absolute values
table(eduwa$LocaleType,exclude = 'nothing')
# relative values
absoluteT=table(eduwa$LocaleType,exclude = 'nothing')
prop.table(absoluteT)
# the pie plots the table:
ToPlot=prop.table(absoluteT)
names(ToPlot)
names(ToPlot)[5]='Unknown'
# the pie plots the table:
titleText='Where are Public Schools located in WA in 2019?'
sourceText='Source: US Department of Education'
# the pie plots the table:
titleText2='WA still has schools locations unknown \n (info from 2018)'
# the pie plots the table:
titleText3='WA needs to fully categorize school locations\n(info from 2018)'
#DMC - the \n moves the rest of the title to the next line
ToPlot*100
# details:
ToPlot=ToPlot*100 # preparing labels
paletteHereNew=c('gray') # just one color
tableFreq=as.data.frame(ToPlot)
names(tableFreq)=c("locale","pct")
#you have:
tableFreq
library(ggplot2)
#base GGPLOT2 starts with a "base", telling WHAT VARIABLES TO PLOT
base= ggplot(data = tableFreq,
aes(x = locale,
y = pct))
plot1 = base + geom_bar(fill ="gray",
stat = 'identity') # y is just what it is!
#plot1
plot2 = plot1 + labs(title=titleText,
x = NULL,
y = NULL,
caption = sourceText)
plot2
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
plot3
library(scales)
# customize Y axis
plot4 = plot3 + scale_y_continuous(breaks=c(0,10, 25,40,50),
limits = c(0, 50), # expand = c(0, 0),
labels=scales::unit_format(suffix = "%"))
plot4
plot5 = plot4 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plot5
plot6 = plot5 + geom_text(aes(
y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3)
# wanna flip the plot?
#plot6 #+ coord_flip()
tableFreq[order(-tableFreq$pct),]
plot7=plot6 + coord_flip() + aes(x=reorder(locale, pct))
plot7
base = ggplot(tableFreq, aes(x=locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "grey50")
lolliplot1 + geom_point()
tableFreq[order(tableFreq$pct),]
# reordering DF steps:
tableFreqO=tableFreq[order(tableFreq$pct),]
base = ggplot(tableFreqO, aes(locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# new variable
tableFreqO$gap=tableFreqO$pct-25
# plot the new variable
base = ggplot(tableFreqO, aes(locale,gap))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
# add new aesthetics 'color'
base = ggplot(tableFreqO, aes(locale,gap,
color=PositiveGap)) #change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
base = ggplot(tableFreqO, aes(locale,gap,color=PositiveGap,
label = round(gap,3))) #  change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2=lolliplot1 + geom_point()
lolliplot3= lolliplot2 + scale_x_discrete(limits=tableFreqO$locale)
# annotating and moving the text on the horizontal
lolliplot3 + geom_text(nudge_x=0.3)
lolliplot3 + geom_text(nudge_x=0.3,show.legend = FALSE)
titleText = "Where are schools located in WA in 2019?"
lolliplot4 = lolliplot3 + labs(title=titleText,
x = "Location",
y = "Gap (%)",
caption = sourceText)
lolliplot4 + geom_text(nudge_x=0.3,show.legend = FALSE) + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
# boxplots do not use frequency tables
# as.numeric produces turns levels of the factor into numbers
box1 = ggplot(eduwa, aes(y=as.numeric(High.Grade),x=''))
box1 = box1 + geom_boxplot() + coord_flip() # to show it horizontally
box1
# the labels use the original ordinal levels
ordLabels= levels(eduwa$High.Grade)
box2 = box1 + scale_y_continuous(labels=ordLabels,breaks=1:15)
box2
#get positions
# using 'ggplot_build'
pos_q1=     ggplot_build(box2)$data[[1]]$lower
pos_median= ggplot_build(box2)$data[[1]]$middle
pos_q3=     ggplot_build(box2)$data[[1]]$upper
# using
levels(eduwa$High.Grade)[c(pos_q1,pos_median,pos_q3)]
#box2
title="Box plot of maximum grade in WA"
box3 = box2 + labs(title=title,
x="",
y="Grade level")
box4 = box3 + theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
box4
boxplot(meanValues,horizontal = T,ylim=c(5,30))
#setting the chunk options
knitr::opts_chunk$set(echo=FALSE)
link='https://github.com/EvansDataScience/VisualAnalytics_2_tabularData/raw/master/data/eduwa.rda'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
# absolute values
table(eduwa$LocaleType,exclude = 'nothing')
# relative values
absoluteT=table(eduwa$LocaleType,exclude = 'nothing')
prop.table(absoluteT)
# the pie plots the table:
ToPlot=prop.table(absoluteT)
names(ToPlot)
names(ToPlot)[5]='Unknown'
# the pie plots the table:
titleText='Where are Public Schools located in WA in 2019?'
sourceText='Source: US Department of Education'
# the pie plots the table:
titleText2='WA still has schools locations unknown \n (info from 2018)'
# the pie plots the table:
titleText3='WA needs to fully categorize school locations\n(info from 2018)'
#DMC - the \n moves the rest of the title to the next line
ToPlot*100
# details:
ToPlot=ToPlot*100 # preparing labels
paletteHereNew=c('gray') # just one color
tableFreq=as.data.frame(ToPlot)
names(tableFreq)=c("locale","pct")
#you have:
tableFreq
library(ggplot2)
#base GGPLOT2 starts with a "base", telling WHAT VARIABLES TO PLOT
base= ggplot(data = tableFreq,
aes(x = locale,
y = pct))
plot1 = base + geom_bar(fill ="gray",
stat = 'identity') # y is just what it is!
#plot1
plot2 = plot1 + labs(title=titleText,
x = NULL,
y = NULL,
caption = sourceText)
plot2
plot3 = plot2 + geom_hline(yintercept = 25, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
plot3
library(scales)
# customize Y axis
plot4 = plot3 + scale_y_continuous(breaks=c(0,10, 25,40,50),
limits = c(0, 50), # expand = c(0, 0),
labels=scales::unit_format(suffix = "%"))
plot4
plot5 = plot4 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plot5
plot6 = plot5 + geom_text(aes(
y = pct ,
label = paste0(round(pct,2), '%')),
vjust=1, # if flipping 'hjust'
size = 3)
# wanna flip the plot?
#plot6 #+ coord_flip()
tableFreq[order(-tableFreq$pct),]
plot7=plot6 + coord_flip() + aes(x=reorder(locale, pct))
plot7
base = ggplot(tableFreq, aes(x=locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "grey50")
lolliplot1 + geom_point()
tableFreq[order(tableFreq$pct),]
# reordering DF steps:
tableFreqO=tableFreq[order(tableFreq$pct),]
base = ggplot(tableFreqO, aes(locale,pct))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = pct,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# new variable
tableFreqO$gap=tableFreqO$pct-25
# plot the new variable
base = ggplot(tableFreqO, aes(locale,gap))
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
# add new aesthetics 'color'
base = ggplot(tableFreqO, aes(locale,gap,
color=PositiveGap)) #change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2 = lolliplot1 + geom_point()
lolliplot2 + scale_x_discrete(limits=tableFreqO$locale) # key element
# a new column for color
tableFreqO$PositiveGap=ifelse(tableFreqO$gap>0,T,F)
base = ggplot(tableFreqO, aes(locale,gap,color=PositiveGap,
label = round(gap,3))) #  change
lolliplot1=base + geom_segment(aes(y = 0,
x = locale,
yend = gap,
xend = locale), color = "gray")
lolliplot2=lolliplot1 + geom_point()
lolliplot3= lolliplot2 + scale_x_discrete(limits=tableFreqO$locale)
# annotating and moving the text on the horizontal
lolliplot3 + geom_text(nudge_x=0.3)
lolliplot3 + geom_text(nudge_x=0.3,show.legend = FALSE)
titleText = "Where are schools located in WA in 2019?"
lolliplot4 = lolliplot3 + labs(title=titleText,
x = "Location",
y = "Gap (%)",
caption = sourceText)
lolliplot4 + geom_text(nudge_x=0.3,show.legend = FALSE) + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
# boxplots do not use frequency tables
# as.numeric produces turns levels of the factor into numbers
box1 = ggplot(eduwa, aes(y=as.numeric(High.Grade),x=''))
box1 = box1 + geom_boxplot() + coord_flip() # to show it horizontally
box1
# the labels use the original ordinal levels
ordLabels= levels(eduwa$High.Grade)
box2 = box1 + scale_y_continuous(labels=ordLabels,breaks=1:15)
box2
#get positions
# using 'ggplot_build'
pos_q1=     ggplot_build(box2)$data[[1]]$lower
pos_median= ggplot_build(box2)$data[[1]]$middle
pos_q3=     ggplot_build(box2)$data[[1]]$upper
# using
levels(eduwa$High.Grade)[c(pos_q1,pos_median,pos_q3)]
#box2
title="Box plot of maximum grade in WA"
box3 = box2 + labs(title=title,
x="",
y="Grade level")
box4 = box3 + theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"))
box4
dataHist=hist(eduwa$Free.Lunch)
hist(eduwa$Free.Lunch, labels=T, xlab="Free Lunch", xaxt="n")
axis(side=1, at=dataHist$breaks) # showing axis labels better
# tapply(variable,group,functionToApply)
tapply(eduwa$Student.Teacher.Ratio, eduwa$County, mean)
# DMC - If there is one missing value, then the mean will return missing
# strategy 1: remove missing before computing function: na.rm=T
tapply(eduwa$Student.Teacher.Ratio, eduwa$County, mean,na.rm=T)
# strategy 2:
eduwa4=eduwa[complete.cases(eduwa$Student.Teacher.Ratio),]
tapply(eduwa4$Student.Teacher.Ratio,
eduwa4$County,
mean)
# keeping strategy 2:
meanValues=tapply(eduwa4$Student.Teacher.Ratio,
eduwa4$County,
mean)
hist(meanValues)
summary(meanValues)
#reference line
hist(meanValues)
abline(v=mean(meanValues),lty=3,lwd=3,col='blue')
mvDense=density(meanValues)
plot(mvDense,main="Average student to teacher ratio per county in WA",col='black',xlab=NA)
abline(v=mean(meanValues),lty=3,lwd=3,col='blue') #mean
abline(v=median(meanValues),lty=3,lwd=3,col='red')#median
legend(x="right",
legend=c('mean','median'),
fill = c('blue','red'),bty = 'n') #no box in the legend
bp=boxplot(meanValues,horizontal = T,ylim=c(5,30))
bp$out
boxplot(meanValues,horizontal = T,ylim=c(5,30))
text(x= 10, y= 0.8, labels= "Outliers are:",col='gray')
text(x= 10, y= 0.75,
labels= paste(names(bp$out)[1], 'and', names(bp$out)[2]),
col='gray')
dataHist=hist(bp$out)
hist(bp$out, labels=T, xlab="Free Lunch", xaxt="n")
axis(side=1, at=dataHist$breaks) # showing axis labels better
#reference line
hist(meanValues)
abline(v=mean(meanValues),lty=3,lwd=3,col='blue')
dataHist=hist(eduwa4$Student.Teacher.Ratio)
hist(eduwa4$Student.Teacher.Ratio, labels=T, xlab="Free Lunch", xaxt="n")
axis(side=1, at=dataHist$breaks) # showing axis labels better
